#!/usr/bin/env python

"""Script for ASIST Study 3 evaluation"""

import json
from glob import glob
import logging
from logging import info, debug
import argparse
from tqdm import tqdm
import pandas as pd
from datetime import datetime

logging.basicConfig(level=logging.WARN)

#topics used to determine TA3 survey metrics
topicsToIndex = [
    "agent/intervention/ASI_UAZ_TA1_ToMCAT/chat",
    "agent/asr/final",
    "minecraft/chat",
    "observations/events/player/marker_placed"
    ]
## Helper Functions

#get participant-color key from trial topic message
#I probably won't use this
#but im not comfortable removing it yet
def getPlayerInfo(msg):

    players = [None, None, None] #0 is red, 1 is grn, 2 is blu
    for client in msg['data']['client_info']:
        if 'RED' in client['playername']:
            players[0] = client
        elif 'GREEN' in client['playername']:
            players[1] = client
        elif 'BLUE' in client['playername']:
            players[2] = client
        else:
            print("setPlayerInfo error")
            print(message)
            exit()
        
    return players

#Determine which player a message is relevant to
#-1 is undetermined
#0  is ignore (server messages in text chat)
def getMessageDest(msg):
    #determine minecraft/chat player from 'sender'
    if msg['topic'] == 'minecraft/chat':
        if 'RED' in msg['data']['sender']:
            return 'RED'
        if 'GREEN' in msg['data']['sender']:
            return 'GREEN'
        if 'BLUE' in msg['data']['sender']:
            return 'BLUE'
        if 'Server' in msg['data']['sender']:
            return 0
        return -1;
        
    #determine agent/intervention... player from message content
    if msg['topic'] == "agent/intervention/ASI_UAZ_TA1_ToMCAT/chat":
        if 'Red' in msg['data']['content']:
            return 'RED'
        if 'Blue' in msg['data']['content']:
            return 'GREEN'
        if 'Green' in msg['data']['content']:
            return 'BLUE'
        if 'Hi, Team.' in msg['data']['content']:
            return 0 #Right now I'm ignoring Tom's intro message. 
        return -1
    #determine agent/asr/final player from 'participant_id'
    if msg['topic'] == 'agent/asr/final':
            
        if 'RED' in msg['data']['participant_id']:
            return 'RED'
        if 'GREEN' in msg['data']['participant_id']:
            return 'GREEN'
        if 'BLUE' in msg['data']['participant_id']:
            return 'BLUE'
    
        else:
            return -1

    #determine observations/.../marker_placed player from playername
    if msg['topic'] == 'observations/events/player/marker_placed':
        if 'RED' in msg['data']['playername']:
            return 'RED'
        if 'GREEN' in msg['data']['playername']:
            return 'GREEN'
        if 'BLUE' in msg['data']['playername']:
            return 'BLUE'
    
    else:
        return -1
    return -1


#Determine the type of intervention ToM performed
#Returns -1 if it can't
def getInterventionType(msg):
    if message['topic'] != 'agent/intervention/ASI_UAZ_TA1_ToMCAT/chat':
        return -1

    explanation = message["data"]["explanation"]["info"]
    if "did not get an answer" in explanation:
        return "help_request_reply"
    if "did not ask" in explanation:
        if "critical victim" in explanation:
            return "help_request_for_critical_victim"
        elif "threat room" in explanation:
            return "help_request_for_room_escape"
        else:
            return -1
    if "placed a marker" in explanation:
        return "marker_block"
    if "ensure" in explanation:
        return "motivational"

    return -1

#Analyze a sequence of events to assess compliance
#todo
def analyze_compliance(events, color):
    #Sort by timestamp
    #todo
    def get_time(msg):
        return datetime.strptime(msg, "")

    print(events[0]['@timestamp'])

    #Analyze messages
    for message in events:
        pass
    
def run_evaluation(args):
    ac_use_counts = {}
    n_interventions = 0
    intervention_type_counts = {}
    output_file = open(args.output, "w")
    n_files_processed = 0
    #List of events for each player. Contains both interventions and player activity

    
    #players matches participant ID's to colors
    #players[0] is red, players[1] is green
    players = [None, None, None]
    filled_player_info = False #true when players is filled from trial topic
    events = {'RED':[], 'BLUE':[], 'GREEN':[]} #events[0] is red, etc. 


    for filepath in tqdm(glob(args.data_dir + "/*T00*UAZ*.metadata")):
        n_files_processed += 1
        info(f"Processing {filepath}")
        with open(filepath) as f:
            for line in f:
                message = json.loads(line)

                #Temporary for looking at things
                #if(
                #    "topic" in message
                #    and message["topic"] == "agent/asr/final"
                #):
                #    print(message)

                
                #Use the first agent topic message to match player info
                #may not need this code
                if (
                    filled_player_info == False
                    and "topic" in message
                   and message["topic"] == "trial"
                ):
                    players = getPlayerInfo(message)
                    filled_player_info = True
                    
                #Index messages into lists for compliance eval
                if (
                    "topic" in message
                    and message["topic"] in topicsToIndex
                ):
                    #ignore some messages
                    if getMessageDest(message) == 0:
                        pass
                    #if we can't determine the relevant player
                    elif getMessageDest(message) == -1:
                        print("message index fail")
                        print(getMessageDest(message))
                        print(message)
                        exit()

                    else:
                        events[getMessageDest(message)].append(message)
                    


                #Adarsh's code to tally interventions
                if (
                    "topic" in message
                    and message["topic"]
                    == "agent/intervention/ASI_UAZ_TA1_ToMCAT/chat"
                ):
                    n_interventions += 1
                    explanation = message["data"]["explanation"][
                        "info"
                    ].replace("This intervention was triggered", "")

                    intervention_type = ""

                    if "did not get an answer" in explanation:
                        intervention_type = "help_request_reply"
                        ACs_used = {
                            "uaz_dialog_agent",
                            "AC_IHMC_TA2_Player-Proximity",
                        }
                    elif "did not ask" in explanation:
                        if "critical victim" in explanation:
                            intervention_type = (
                                "help_request_for_critical_victim"
                            )
                            ACs_used = {
                                "uaz_dialog_agent",
                                "AC_CMU_TA1_PyGLFoVAgent",
                                "AC_IHMC_TA2_Player-Proximity",
                            }
                        elif "threat room" in explanation:
                            intervention_type = "help_request_for_room_escape"
                            ACs_used = {
                                "uaz_dialog_agent",
                                "AC_CMU_TA1_PyGLFoVAgent",
                                "AC_IHMC_TA2_Player-Proximity",
                            }
                        else:
                            raise (
                                ValueError(
                                    "Could not determine help request "
                                    "intervention type for explanation "
                                    f"'{explanation}'"
                                )
                            )

                    elif "placed a marker" in explanation:
                        intervention_type = "marker_block"
                        ACs_used = {
                            "uaz_dialog_agent",
                            "AC_IHMC_TA2_Player-Proximity",
                        }
                    elif "ensure" in explanation:
                        intervention_type = "motivational"
                        ACs_used = {}
                    else:
                        raise (
                            ValueError(
                                "Could not determine intervention type: ",
                                explanation,
                            )
                        )
                    intervention_type_counts[intervention_type] = (
                        intervention_type_counts.get(intervention_type, 0) + 1
                    )
                    debug(intervention_type + "|" + explanation)
                    for ac in ACs_used:
                        ac_use_counts[ac] = ac_use_counts.get(ac, 0) + 1

    for player in events.keys():
        analyze_compliance(events[player],player)
    
    def write(line):
        output_file.write(line + "\n")

    write(f"Study 3 evaluation report (generated {datetime.utcnow().isoformat()+'Z'})")
    write("=================================================================")
    write("")
    write(f"Total number of files processed: {n_files_processed}")
    write("")
    write(f"Total number of interventions: {n_interventions}")
    write("")
    write("Intervention types")
    write("------------------")
    write(pd.Series(intervention_type_counts, name="Count").to_markdown())
    write("")
    write("AC Use Counts")
    write("-------------")
    write(
        pd.Series(
            ac_use_counts, name="Number of interventions participated in"
        ).to_markdown()
    )

    output_file.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "--data_dir",
        help="Directory containing .metadata files",
        default="/media/mule/projects/tomcat/protected/study-3_2022",
    )
    parser.add_argument(
        "--output",
        help="Path to output report file",
        default="study_3_evaluation.md",
    )

    args = parser.parse_args()
    run_evaluation(args)


